name: Auto Register Warp Account

on:
  schedule:
    - cron: '0 */1 * * *'  # 每1小时执行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  register:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Randomize Machine ID
        run: |
          echo "=== 修改机器码 ==="
          
          # 1. 生成随机的 machine-id（使用 openssl 更可靠）
          RANDOM_MACHINE_ID=$(openssl rand -hex 16)
          echo "新的 machine-id: $RANDOM_MACHINE_ID"
          
          # 修改 /etc/machine-id
          echo "$RANDOM_MACHINE_ID" | sudo tee /etc/machine-id > /dev/null
          
          # 修改 /var/lib/dbus/machine-id（如果存在）
          if [ -f /var/lib/dbus/machine-id ]; then
            echo "$RANDOM_MACHINE_ID" | sudo tee /var/lib/dbus/machine-id > /dev/null
          fi
          
          # 2. 生成随机的 hostname
          RANDOM_SUFFIX=$(openssl rand -hex 4)
          RANDOM_HOSTNAME="gh-runner-${RANDOM_SUFFIX}"
          echo "新的 hostname: $RANDOM_HOSTNAME"
          sudo hostname "$RANDOM_HOSTNAME"
          echo "$RANDOM_HOSTNAME" | sudo tee /etc/hostname > /dev/null
          
          # 3. 清理可能缓存机器信息的文件
          sudo rm -rf /var/lib/systemd/random-seed 2>/dev/null || true
          rm -rf ~/.cache/* 2>/dev/null || true
          
          # 验证修改
          echo "=== 验证机器码 ==="
          echo "machine-id: $(cat /etc/machine-id)"
          echo "hostname: $(hostname)"
          
          echo "✅ 机器码修改完成"
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget xvfb
          
          # 完全卸载旧版本 Chrome 和 Chromium
          sudo apt-get remove -y google-chrome-stable chromium-browser chromium || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # 清理可能残留的 Chrome 文件
          sudo rm -rf /opt/google/chrome || true
          sudo rm -rf ~/.config/google-chrome || true
          
          # 安装最新版 Chrome
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -f install -y
          
          # 验证安装
          echo "=== Chrome 安装信息 ==="
          google-chrome --version
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # 清理 ChromeDriver 缓存
          rm -rf ~/.undetected_chromedriver
          rm -rf /tmp/.com.google.Chrome.*
      
      - name: Configure environment
        run: |
          # 创建 .env 文件
          cat > .env << EOF
          MOEMAIL_URL=${{ secrets.MOEMAIL_URL || 'https://email.959585.xyz' }}
          MOEMAIL_API_KEY=${{ secrets.MOEMAIL_API_KEY }}
          FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          WARP_LOGIN_URL=https://app.warp.dev/referral/EWP6QD
          HEADLESS=true
          FINGERPRINT_RANDOMIZE=true
          FINGERPRINT_LEVEL=balanced
          ENHANCED_PROFILES_ENABLED=true
          STRICT_CONSISTENCY_CHECK=true
          FINGERPRINT_DEBUG=false
          EMAIL_TIMEOUT=120
          REGISTER_COUNT=1
          REGISTER_INTERVAL=5
          EOF
          
          # 验证必需的环境变量
          if [ -z "${{ secrets.MOEMAIL_API_KEY }}" ]; then
            echo "❌ MOEMAIL_API_KEY 未配置"
            exit 1
          fi
          
          if [ -z "${{ secrets.FIREBASE_API_KEY }}" ]; then
            echo "❌ FIREBASE_API_KEY 未配置"
            exit 1
          fi
          
          echo "✅ 环境配置完成"
      
      - name: Batch registration
        id: register
        continue-on-error: true
        run: |
          # 创建必要目录
          mkdir -p accounts debug
          
          # 显示环境信息
          echo "=== 环境信息 ==="
          google-chrome --version
          python --version
          
          # 统计当前账号数
          CURRENT_COUNT=$(find accounts -name "*.json" -not -name "all_accounts.json" 2>/dev/null | wc -l)
          echo "📊 当前账号数: $CURRENT_COUNT"
          
          # 使用批量注册脚本，每次增加 10 个账号
          echo "🚀 开始批量注册（目标增加 10 个账号）..."
          xvfb-run -a python batch_register.py --add 10 --headless true --max-fails 5 2>&1 | tee registration.log
          
          # 保存退出码
          EXIT_CODE=${PIPESTATUS[0]}
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          
          # 统计新增账号数
          NEW_COUNT=$(find accounts -name "*.json" -not -name "all_accounts.json" 2>/dev/null | wc -l)
          ADDED_COUNT=$((NEW_COUNT - CURRENT_COUNT))
          
          echo "📊 新增账号数: $ADDED_COUNT"
          echo "added_count=$ADDED_COUNT" >> $GITHUB_OUTPUT
          echo "total_count=$NEW_COUNT" >> $GITHUB_OUTPUT
          
          # 检查是否有新账号
          if [ $ADDED_COUNT -gt 0 ]; then
            echo "account_created=true" >> $GITHUB_OUTPUT
            echo "✅ 批量注册完成，新增 $ADDED_COUNT 个账号"
          else
            echo "account_created=false" >> $GITHUB_OUTPUT
            echo "⚠️ 未成功注册新账号"
          fi
      
      - name: Commit accounts
        if: steps.register.outputs.account_created == 'true'
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          
          # 强制添加 accounts 目录（忽略 .gitignore）
          git add -f accounts/
          
          if ! git diff --staged --quiet; then
            ADDED_COUNT="${{ steps.register.outputs.added_count }}"
            TOTAL_COUNT="${{ steps.register.outputs.total_count }}"
            
            git commit -m "🤖 Auto-register: Batch registration completed

            ➕ Added: $ADDED_COUNT accounts
            📊 Total: $TOTAL_COUNT accounts
            ⏰ Time: $(date -u '+%Y-%m-%d %H:%M:%S') UTC
            🔗 Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            
            git push
            echo "✅ 账号文件已提交"
          else
            echo "ℹ️ 没有新文件需要提交"
          fi
      
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: registration-run-${{ github.run_number }}
          path: |
            accounts/**/*.json
            registration.log
            debug/*.png
          retention-days: 30
          if-no-files-found: ignore