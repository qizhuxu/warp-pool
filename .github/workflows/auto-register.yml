name: Auto Register Warp Account

on:
  schedule:
    - cron: '0 */1 * * *'  # 每1小时执行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  register:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Randomize Machine ID
        run: |
          echo "=== 修改机器码 ==="
          
          # 1. 生成随机的 machine-id（使用 openssl 更可靠）
          RANDOM_MACHINE_ID=$(openssl rand -hex 16)
          echo "新的 machine-id: $RANDOM_MACHINE_ID"
          
          # 修改 /etc/machine-id
          echo "$RANDOM_MACHINE_ID" | sudo tee /etc/machine-id > /dev/null
          
          # 修改 /var/lib/dbus/machine-id（如果存在）
          if [ -f /var/lib/dbus/machine-id ]; then
            echo "$RANDOM_MACHINE_ID" | sudo tee /var/lib/dbus/machine-id > /dev/null
          fi
          
          # 2. 生成随机的 hostname
          RANDOM_SUFFIX=$(openssl rand -hex 4)
          RANDOM_HOSTNAME="gh-runner-${RANDOM_SUFFIX}"
          echo "新的 hostname: $RANDOM_HOSTNAME"
          sudo hostname "$RANDOM_HOSTNAME"
          echo "$RANDOM_HOSTNAME" | sudo tee /etc/hostname > /dev/null
          
          # 3. 清理可能缓存机器信息的文件
          sudo rm -rf /var/lib/systemd/random-seed 2>/dev/null || true
          rm -rf ~/.cache/* 2>/dev/null || true
          
          # 验证修改
          echo "=== 验证机器码 ==="
          echo "machine-id: $(cat /etc/machine-id)"
          echo "hostname: $(hostname)"
          
          echo "✅ 机器码修改完成"
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget xvfb
          
          # 完全卸载旧版本 Chrome 和 Chromium
          sudo apt-get remove -y google-chrome-stable chromium-browser chromium || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # 清理可能残留的 Chrome 文件
          sudo rm -rf /opt/google/chrome || true
          sudo rm -rf ~/.config/google-chrome || true
          
          # 安装最新版 Chrome
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -f install -y
          
          # 验证安装
          echo "=== Chrome 安装信息 ==="
          google-chrome --version
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # 清理 ChromeDriver 缓存
          rm -rf ~/.undetected_chromedriver
          rm -rf /tmp/.com.google.Chrome.*
      
      - name: Download previous accounts
        id: download
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DATE_TAG=$(date -u '+%Y-%m-%d')
          echo "date_tag=$DATE_TAG" >> $GITHUB_OUTPUT
          
          # 尝试下载今天的 all_accounts.json
          if gh release view "$DATE_TAG" >/dev/null 2>&1; then
            echo "📥 发现今天的 release，下载现有账号数据..."
            
            # 下载并解压
            gh release download "$DATE_TAG" -p "all_accounts.json" 2>/dev/null || true
            
            if [ -f "all_accounts.json" ]; then
              # 创建目录并移动文件
              mkdir -p "accounts/$DATE_TAG"
              mv all_accounts.json "accounts/$DATE_TAG/"
              
              OLD_COUNT=$(jq '. | length' "accounts/$DATE_TAG/all_accounts.json")
              echo "📊 已下载现有账号: $OLD_COUNT 个"
              echo "old_count=$OLD_COUNT" >> $GITHUB_OUTPUT
            else
              echo "ℹ️  今天的 release 中没有 all_accounts.json"
              echo "old_count=0" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️  今天还没有 release，从零开始"
            echo "old_count=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Configure environment
        run: |
          # 创建 .env 文件
          cat > .env << EOF
          MOEMAIL_URL=${{ secrets.MOEMAIL_URL || 'https://email.959585.xyz' }}
          MOEMAIL_API_KEY=${{ secrets.MOEMAIL_API_KEY }}
          FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          WARP_LOGIN_URL=https://app.warp.dev/referral/EWP6QD
          HEADLESS=true
          FINGERPRINT_RANDOMIZE=true
          FINGERPRINT_LEVEL=balanced
          ENHANCED_PROFILES_ENABLED=true
          STRICT_CONSISTENCY_CHECK=true
          FINGERPRINT_DEBUG=false
          EMAIL_TIMEOUT=120
          REGISTER_COUNT=1
          REGISTER_INTERVAL=5
          EOF
          
          # 验证必需的环境变量
          if [ -z "${{ secrets.MOEMAIL_API_KEY }}" ]; then
            echo "❌ MOEMAIL_API_KEY 未配置"
            exit 1
          fi
          
          if [ -z "${{ secrets.FIREBASE_API_KEY }}" ]; then
            echo "❌ FIREBASE_API_KEY 未配置"
            exit 1
          fi
          
          echo "✅ 环境配置完成"
      
      - name: Batch registration
        id: register
        continue-on-error: true
        run: |
          # 创建必要目录
          mkdir -p accounts debug
          
          # 显示环境信息
          echo "=== 环境信息 ==="
          google-chrome --version
          python --version
          
          # 获取旧账号数
          OLD_COUNT="${{ steps.download.outputs.old_count }}"
          echo "📊 已有账号数: $OLD_COUNT"
          
          # 使用批量注册脚本，每次增加 5 个账号
          echo "🚀 开始批量注册（目标增加 5 个账号）..."
          xvfb-run -a python batch_register.py --add 5 --headless true --max-fails 5 2>&1 | tee registration.log
          
          # 保存退出码
          EXIT_CODE=${PIPESTATUS[0]}
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          
          # 检查 all_accounts.json 是否存在
          DATE_TAG="${{ steps.download.outputs.date_tag }}"
          ALL_ACCOUNTS_FILE="accounts/$DATE_TAG/all_accounts.json"
          
          if [ -f "$ALL_ACCOUNTS_FILE" ]; then
            # 统计总账号数和新增数
            TOTAL_COUNT=$(jq '. | length' "$ALL_ACCOUNTS_FILE")
            ADDED_COUNT=$((TOTAL_COUNT - OLD_COUNT))
            
            echo "📊 新增账号数: $ADDED_COUNT"
            echo "📊 总账号数: $TOTAL_COUNT"
            echo "added_count=$ADDED_COUNT" >> $GITHUB_OUTPUT
            echo "total_count=$TOTAL_COUNT" >> $GITHUB_OUTPUT
            
            if [ $ADDED_COUNT -gt 0 ]; then
              echo "account_created=true" >> $GITHUB_OUTPUT
              echo "✅ 批量注册完成，新增 $ADDED_COUNT 个账号"
            else
              echo "account_created=false" >> $GITHUB_OUTPUT
              echo "⚠️ 未成功注册新账号"
            fi
          else
            echo "account_created=false" >> $GITHUB_OUTPUT
            echo "added_count=0" >> $GITHUB_OUTPUT
            echo "total_count=$OLD_COUNT" >> $GITHUB_OUTPUT
            echo "⚠️ 未找到 all_accounts.json 文件"
          fi
      
      - name: Prepare release data
        if: steps.register.outputs.account_created == 'true'
        id: prepare
        run: |
          DATE_TAG="${{ steps.download.outputs.date_tag }}"
          ALL_ACCOUNTS_FILE="accounts/$DATE_TAG/all_accounts.json"
          
          # 确保文件存在
          if [ ! -f "$ALL_ACCOUNTS_FILE" ]; then
            echo "❌ all_accounts.json 不存在"
            exit 1
          fi
          
          # 复制到根目录方便上传
          cp "$ALL_ACCOUNTS_FILE" ./all_accounts.json
          echo "✅ 已准备 all_accounts.json"
          
          # 生成发布说明
          ADDED_COUNT="${{ steps.register.outputs.added_count }}"
          TOTAL_COUNT="${{ steps.register.outputs.total_count }}"
          OLD_COUNT="${{ steps.download.outputs.old_count }}"
          
          cat > release-notes.md << EOF
          # 📅 $(date -u '+%Y-%m-%d') 账号数据
          
          ## 📊 统计信息
          - ➕ 本次新增: **${ADDED_COUNT}** 个账号
          - 📦 今日总计: **${TOTAL_COUNT}** 个账号
          - � 之前总已有: **${OLD_COUNT}** 个账号
          - ⏰ 更新时间: $(date -u '+%Y-%m-%d %H:%M:%S') UTC
          
          ## 📥 下载说明
          下载 \`all_accounts.json\` 文件即可获取今日所有账号数据（累计）。
          
          ## 🔗 相关链接
          - [查看工作流运行](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [查看所有发布](https://github.com/${{ github.repository }}/releases)
          
          ---
          🤖 由 GitHub Actions 自动生成 | 每小时自动更新
          EOF
          
          echo "✅ 发布说明已生成"
      
      - name: Create or update daily release
        if: steps.register.outputs.account_created == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DATE_TAG="${{ steps.download.outputs.date_tag }}"
          
          # 检查今天的 release 是否已存在
          if gh release view "$DATE_TAG" >/dev/null 2>&1; then
            echo "📝 更新现有 release: $DATE_TAG"
            
            # 删除旧的 all_accounts.json
            gh release delete-asset "$DATE_TAG" "all_accounts.json" --yes 2>/dev/null || true
            
            # 上传新的 all_accounts.json
            gh release upload "$DATE_TAG" "all_accounts.json" --clobber
            
            # 更新 release 说明
            gh release edit "$DATE_TAG" --notes-file release-notes.md
            
            echo "✅ Release 已更新（累计 ${{ steps.register.outputs.total_count }} 个账号）"
          else
            echo "🆕 创建新 release: $DATE_TAG"
            
            # 创建新 release
            gh release create "$DATE_TAG" \
              "all_accounts.json" \
              --title "📅 Accounts - $DATE_TAG" \
              --notes-file release-notes.md
            
            echo "✅ Release 已创建"
          fi
      
      - name: Cleanup old releases
        if: steps.register.outputs.account_created == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🧹 清理 7 天前的 releases..."
          
          # 计算 7 天前的日期
          CUTOFF_DATE=$(date -u -d '7 days ago' '+%Y-%m-%d' 2>/dev/null || date -u -v-7d '+%Y-%m-%d')
          echo "清理日期阈值: $CUTOFF_DATE"
          
          # 获取所有 release 标签
          gh release list --limit 100 | while read -r line; do
            TAG=$(echo "$line" | awk '{print $1}')
            
            # 检查标签是否是日期格式 (YYYY-MM-DD)
            if [[ "$TAG" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
              # 比较日期
              if [[ "$TAG" < "$CUTOFF_DATE" ]]; then
                echo "🗑️  删除旧 release: $TAG"
                gh release delete "$TAG" --yes --cleanup-tag
              fi
            fi
          done
          
          echo "✅ 清理完成"
      
      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs-${{ github.run_number }}
          path: |
            registration.log
            debug/*.png
          retention-days: 7
          if-no-files-found: ignore